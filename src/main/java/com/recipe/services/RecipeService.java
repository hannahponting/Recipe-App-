package com.recipe.services;

import com.recipe.dataaccess.RecipeRepository;
import com.recipe.entities.Recipe;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;



import java.util.Optional;


@Service
public class RecipeService {

    RecipeRepository recipeRepository;
      
    @Autowired
    public RecipeService(RecipeRepository recipeRepository){
        this.recipeRepository = recipeRepository;
    }

    public Recipe addRecipe(Recipe recipe) {
        if (recipe.getId() != null) {
            throw new IllegalArgumentException("The unique ID is generated by the service and does not need to be provided.");
        }
        if (recipe.getName() == null){
            throw new IllegalArgumentException("The recipe must have a name");
        }
        if (recipe.getInstructions() == null){
            throw new IllegalArgumentException("The recipe must have instructions");
        }
        if (recipe.getIngredientsList() == null){
            throw new IllegalArgumentException("The recipe must have instructions");
        }
        recipeRepository.save(recipe);
        return recipe;
    }

  
    public void deleteById(long id){
        recipeRepository.deleteById(id);
    }





    public Iterable<Recipe> findAll(){
        return this.recipeRepository.findAll();
    }

    public Recipe getRecipeById(long recipeId) {
        Optional<Recipe> recipe = this.recipeRepository.findById(recipeId);
        return recipe.orElse(null);


    }

    public Iterable<Recipe> findByNameContains(String keyword) {
        return recipeRepository.findAllByNameContainingIgnoreCase(keyword);
    }

    public Recipe updateRecipe(Recipe incompleteRecipe){
        if(incompleteRecipe ==null) throw new NullPointerException("No recipe entered");
        Recipe oldRecipe;
        if(incompleteRecipe.getId()==null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Recipe not found");
        }
        else {
            oldRecipe = getRecipeById(incompleteRecipe.getId());
        }
        if (oldRecipe == null) {
            throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Recipe not found");
        }
        else {
            if (incompleteRecipe.getName() != null)
                oldRecipe.setName(incompleteRecipe.getName());
            if (incompleteRecipe.getIngredientsList() != null)
                oldRecipe.setIngredientsList(incompleteRecipe.getIngredientsList());
            if (incompleteRecipe.getInstructions() != null)
                oldRecipe.setInstructions(incompleteRecipe.getInstructions());
        }
        return recipeRepository.save(oldRecipe);
    }

}
